import os
import re
import shutil
import yt_dlp
from dotenv import load_dotenv
from google import genai

load_dotenv()
apiKey = os.getenv("GEMINI_API_KEY")
client = genai.Client(api_key=apiKey)

ytTitleArray = []

def formattedYoutubeTitle(title):
    title = re.sub(r'[^\w\s-]', '', title).strip().lower()
    title = re.sub(r'[-\s]+', '-', title)
    return title

def fetchMediaDownloadPath():
    return os.path.join(os.getcwd(), "media-download")

def fetchTranscriptionsPath():
    return os.path.join(os.getcwd(), "transcriptions")

def fetchResumesPath():
    return os.path.join(os.getcwd(), "resumes")

def fetchYoutubeAudio(url):
    try:
        mediaDownloadPath = fetchMediaDownloadPath()

        if not os.path.exists(mediaDownloadPath):
            os.makedirs(mediaDownloadPath, exist_ok=True)

        with yt_dlp.YoutubeDL({'quiet': True}) as ydl:
            info = ydl.extract_info(url, download=False)
        
        formattedTitle = formattedYoutubeTitle(info.get('title', 'video'))
        originalTitle = info.get('title', 'video')
        ytTitleArray.append(originalTitle)
        audioFilePath = os.path.join(mediaDownloadPath, f"{formattedTitle}.%(ext)s")
        
        ydlOptions = {
            'format': 'bestaudio/best',
            'outtmpl': audioFilePath,
            'quiet': False,
            'noplaylist': True,
            'no_warnings': True,
            'progress_with_newline': True,
            'postprocessors': [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'm4a',
                'preferredquality': '192',
            }]
        }
        
        with yt_dlp.YoutubeDL(ydlOptions) as ydl:
            ydl.download([url])
        
        finalPath = audioFilePath.replace('%(ext)s', 'm4a')
        
        print("Download foi conclu√≠do com sucesso! \n Agora iniciando a transcri√ß√£o do √°udio...")

        transcribeAudioToText(finalPath)

    except Exception as e:
        print(f"Erro ao fazer o download do v√≠deo! {e}")
        transcriptionsPath = fetchTranscriptionsPath()
        shutil.rmtree(mediaDownloadPath)
        shutil.rmtree(transcriptionsPath)

def transcribeAudioToText(audioPath):
    try:
        uploadedFile = client.files.upload(file=audioPath)
        transcriptionsPath = fetchTranscriptionsPath()

        if not os.path.exists(transcriptionsPath):
            os.makedirs(transcriptionsPath, exist_ok=True)
        
        response = client.models.generate_content(
            model="gemini-2.0-flash",
            contents=["Analise esse audio e transcreva todo o conte√∫do, por favor.", uploadedFile]
        ) 

        videoTranscriptionTitle = formattedYoutubeTitle(f"transcription-{os.path.basename(audioPath).replace('.m4a', '')}")
        videoTranscriptionTitle = os.path.join(transcriptionsPath, videoTranscriptionTitle)

        with open(f"{videoTranscriptionTitle}.txt", "w", encoding="utf-8") as f:
            f.write(response.text)
        
        print(f"Transcri√ß√£o salva em: transcriptions/{os.path.basename(videoTranscriptionTitle)}.txt! \n Agora iniciando a an√°lise do √°udio...")

        analyzeYoutubeAudioWithAI(f"{videoTranscriptionTitle}.txt")

        mediaDownloadPath = fetchMediaDownloadPath()

    except Exception as e:
        print(f"Erro durante transcri√ß√£o: {e}")
        shutil.rmtree(mediaDownloadPath)
        shutil.rmtree(transcriptionsPath)

def analyzeYoutubeAudioWithAI(transcriptionPath):
    try:
        resumesPath = fetchResumesPath()

        if not os.path.exists(resumesPath):
            os.makedirs(resumesPath, exist_ok=True)

        with open(transcriptionPath, "r", encoding="utf-8") as file:
            transcriptionText = file.read()

        response = client.models.generate_content(
        model="gemini-2.0-flash",
            contents=[
                f"""
                Atue como um analista narrativo e cr√≠tico de v√≠deos do YouTube. Voc√™ √© especializado em extrair sentido, emo√ß√£o e estrutura de v√≠deos longos, transformando transcri√ß√µes em an√°lises editoriais que expliquem o conte√∫do a fundo, mesmo para quem nunca viu o v√≠deo.

                Receber√° abaixo:
                - O t√≠tulo do v√≠deo
                - A transcri√ß√£o completa
                
                Com base nisso, produza uma an√°lise completa, profunda e bem escrita. Sua tarefa √© ir al√©m de um simples resumo. Voc√™ deve:

                ### üé¨ Estrutura do texto final:

                1. Apresenta√ß√£o e Contexto Inicial
                - Apresente o v√≠deo com uma breve contextualiza√ß√£o: quem √© o criador, de onde vem o conte√∫do, qual o objetivo aparente do v√≠deo e qual o p√∫blico-alvo.
                - Explique o tom inicial e a expectativa que o v√≠deo cria.

                2. Resumo Narrativo Estruturado
                - Fa√ßa um resumo cronol√≥gico, destacando todas as principais se√ß√µes do v√≠deo com subt√≠tulos, se necess√°rio.
                - Aprofunde em cada ideia discutida com riqueza de detalhes, inclusive trechos mais emocionais, reflexivos ou pol√™micos.
                - Destaque trechos de fala importantes, e interprete o que o autor est√° tentando comunicar (n√£o apenas repita).

                3. An√°lise de Tom e Emo√ß√µes
                - Analise o tom do v√≠deo ao longo do tempo (ex: melanc√≥lico, cr√≠tico, nost√°lgico, inspirador).
                - Aponte momentos de virada emocional e como isso afeta o entendimento geral.
                - Se for uma homenagem ou despedida, comente o peso emocional.

                4. Subtextos e Inten√ß√µes N√£o Ditas
                - Aprofunde nas entrelinhas: o que o v√≠deo sugere sem dizer diretamente?
                - Existe cr√≠tica impl√≠cita? Nostalgia? Arrependimento? Esperan√ßa?

                5. Impacto no p√∫blico e comunidade
                - Como esse v√≠deo pode afetar a base de f√£s, o p√∫blico geral ou a comunidade retratada?
                - Existe alguma mensagem impl√≠cita para pessoas pr√≥ximas do autor, para a fanbase ou para si mesmo?

                6. Encerramento e Reflex√£o Final
                - Explique como o v√≠deo encerra e qual a mensagem principal deixada.
                - Se houver chamada √† a√ß√£o, diga qual √© e por que ela importa.
                - Feche com uma interpreta√ß√£o cr√≠tica: qual o real sentido do v√≠deo? Por que ele foi feito? O que ele quer provocar?

                ### üìå Regras de escrita:
                - Use uma linguagem envolvente, clara e madura.
                - N√£o seja gen√©rico. Escreva como quem realmente viu e refletiu sobre o v√≠deo.
                - Evite linguagem rob√≥tica ou listas secas. Prefira par√°grafos bem constru√≠dos e com fluidez.
                - Escreva no idioma original do v√≠deo.
                - N√ÉO invente informa√ß√µes. Baseie-se apenas no texto transcrito, mas interprete profundamente o que est√° presente ali.

                Agora, com base nessas instru√ß√µes, produza uma an√°lise completa do v√≠deo abaixo:

                T√≠tulo do v√≠deo: {ytTitleArray[0]}

                Transcri√ß√£o completa:
                {transcriptionText}
                """
            ]
        )

        videoResumeTitle = formattedYoutubeTitle(
            f"resume-{os.path.basename(transcriptionPath).replace('.txt', '').replace('transcription-', '')}"
        )
        videoResumeTitle = os.path.join(resumesPath, videoResumeTitle)

        ytTitle = ytTitleArray[0]

        with open(f"{videoResumeTitle}.md", "w", encoding="utf-8") as f:
            f.write(f"Resumo do v√≠deo: {ytTitle}\n\n")
            f.write(response.text)

        print(f"Sucesso no resumo! Resumo salvo em: resumes/{os.path.basename(videoResumeTitle)}.md")

        mediaDownloadPath = fetchMediaDownloadPath()
        transcriptionsPath = fetchTranscriptionsPath()

        shutil.rmtree(mediaDownloadPath)
        shutil.rmtree(transcriptionsPath)

    except Exception as e:
        print(f"Erro durante resumo: {e}")
        shutil.rmtree(mediaDownloadPath)
        shutil.rmtree(transcriptionsPath)

url = input("Adicione a URL do v√≠deo: ").strip()
fetchYoutubeAudio(url)
